# openapi2-run.yaml
swagger: '2.0'
info:
  title: dcag-api-gateway
  description: DCAG API on API Gateway with a Cloud Run backend
  version: 1.0.0
schemes:
  - https
produces:
  - application/json
x-google-endpoints:
  - name: https://dcag-api-service-s4osc3diiq-el.a.run.app
    allowCors: True
x-google-backend:
  address: https://dcag-api-service-s4osc3diiq-el.a.run.app


#securityDefinitions:
#  firebase:
#    authorizationUrl: ""
#    flow: "implicit"
#    type: "oauth2"
#    # Replace YOUR-PROJECT-ID with your project ID
#    x-google-issuer: "https://securetoken.google.com/anz-driver-ops-ritu"
#    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
#    x-google-audiences: "anz-driver-ops-ritu"
#security:
#  - firebase: []

paths:
  /:
    get:
      summary: Hello World
      operationId: root
      responses:
        '200':
          description: A successful response
          schema:
            type: string
    options:
      description: "Cors associated request to root"
      operationId: "root CORS"
      responses:
        200:
          description: "Allow"
        401:
          description: "Cors not allowed"
  /users:
    get:
      summary: "Get all users"
      operationId: "getUsers"
      responses:
        '200':
          description: A successful response
          schema:
            type: array
    post:
      summary: "Create new user"
      operationId: "createUser"
      responses:
        '200':
          description: A successful response
          schema:
            type: object
  /users/{userId}:
    get:
      summary: "Get user by id"
      operationId: "getUserById"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
        '404':
          description: "User not found"
    put:
      summary: "Update user"
      operationId: "updateUserById"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
      responses:
        '200':
          description: A successful response
          schema:
            type: object
  /users/byPhoneNumber/{phoneNumber}:
    get:
      summary: "Get user by phone number"
      operationId: "getUserByPhoneNumber"
      parameters:
        - name: phoneNumber
          in: path
          required: true
          type: string
          description: "Phone number of the user"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
        '404':
          description: "User not found"
  /users/{userId}/tasks:
    get:
      summary: "Get tasks of the user"
      operationId: "getUserTasks"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
        '404':
          description: "User tasks not found"
    options:
      description: "Cors for getUserTasks"
      operationId: "getUserTasks CORS"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
      responses:
        200:
          description: "Allow"
        401:
          description: "Cors not allowed"
  /users/{userId}/tasks/summary:
    get:
      summary: "Get task summary of the user"
      operationId: "getUserTasksSummary"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
        '404':
          description: "User task summary not found"
  /users/{userId}/tasks/{taskId}:
    get:
      summary: "Get assigned task of the user"
      operationId: "getAssignedUserTask"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
        - name: taskId
          in: path
          required: true
          type: string
          description: "ID of the task"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
    post:
      summary: "Assign task to the user"
      operationId: "createUserTask"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
        - name: taskId
          in: path
          required: true
          type: string
          description: "ID of the task"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
    put:
      summary: "Update assigned task of the user"
      operationId: "updateUserTask"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
        - name: taskId
          in: path
          required: true
          type: string
          description: "ID of the task"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
    options:
      description: "Cors for createUserTask"
      operationId: "createUserTask CORS"
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: "ID of the user"
        - name: taskId
          in: path
          required: true
          type: string
          description: "ID of the task"
      responses:
        200:
          description: "Allow"
        401:
          description: "Cors not allowed"
  /tasks:
    get:
      summary: "Get all tasks"
      operationId: "getAllTasks"
      parameters:
        - name: available
          in: query
          required: false
          type: string
          description: "set available flag to true to retrieve only available tasks"
        - name: userId
          in: query
          required: false
          type: string
          description: "logged in userId(TODO: Remove this param once auth is implemented)"
      responses:
        '200':
          description: A successful response
          schema:
            type: array
    post:
      summary: "Create new task"
      operationId: "createTask"
      responses:
        '200':
          description: A successful response
          schema:
            type: object
    options:
      description: "Cors associated request to tasks"
      operationId: "createTask CORS"
      responses:
        200:
          description: "Allow"
        401:
          description: "Cors not allowed"
  /tasks/{taskId}:
    get:
      summary: "Get task by id"
      operationId: "getTaskById"
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
          description: "ID of the task"
      responses:
        '200':
          description: "A successful response"
          schema:
            type: object
        '404':
          description: "Task not found"
    put:
      summary: "Update task"
      operationId: "updateTaskById"
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
          description: "ID of the task"
      responses:
        '200':
          description: A successful response
          schema:
            type: object